require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe HotelsController, type: :controller do
  before(:each) do
    request.accept = "application/json"
  end
  let(:valid_session) { {} }
  describe "GET #index" do
    it "gets all hotels" do
      hotel = FactoryGirl.create(:hotel)
      get :index, {}, valid_session
      expect(assigns(:hotels)).to eq([hotel])
    end
  end

  describe "GET #show" do
    it "assigns the requested hotel as @hotel" do
      hotel = FactoryGirl.create(:hotel)
      get :show, {:id => hotel.to_param}, valid_session
      expect(assigns(:hotel)).to eq(hotel)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new hotel" do
        expect {
          post :create, format: :json, :hotel => FactoryGirl.attributes_for(:hotel)
        }.to change(Hotel, :count).by(1)
      end

      it "assigns a newly created hotel as @hotel" do
        post :create, format: :json, :hotel => FactoryGirl.attributes_for(:hotel)
        expect(assigns(:hotel)).to be_a(Hotel)
        expect(assigns(:hotel)).to be_persisted
      end

      it "respond with created response code" do
        post :create, format: :json, :hotel => FactoryGirl.attributes_for(:hotel)
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid params" do
      it "doesn't create if rating is greater than 5" do
        post :create, format: :json, :hotel => FactoryGirl.attributes_for(:hotel, :star_rating => 6)
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "doesn't create if rating is less than 0" do
        post :create, format: :json, :hotel => FactoryGirl.attributes_for(:hotel, :star_rating => -1)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "Search" do
    it "get search results matching query (hotel name)", :search => true do
      hotel = FactoryGirl.create(:hotel)
      Sunspot.commit
      get :search, {:query => hotel.name}, valid_session
      expect(assigns(:hotels)).to eq([hotel])
    end

    it "get search results matching query (hotel address)", :search => true do
      hotel = FactoryGirl.create(:hotel)
      Sunspot.commit
      get :search, {:query => hotel.address}, valid_session
      expect(assigns(:hotels)).to eq([hotel])
    end

    it "doesn't get search results when no query is matched", :search => true do
      hotel = FactoryGirl.create(:hotel)
      Sunspot.commit
      get :search, {:query => hotel.name + " invalid"}, valid_session
      expect(assigns(:hotels)).to eq([])
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {:star_rating => 5}
      }

      it "updates the requested hotel" do
        hotel = FactoryGirl.create(:hotel)
        put :update, format: :json, :id => hotel.id, :hotel => new_attributes
        hotel.reload
        expect(hotel.star_rating).to eq(5)
      end

      it "assigns the requested hotel as @hotel" do
        hotel = FactoryGirl.create(:hotel)
        put :update, format: :json, :id => hotel.id, :hotel => new_attributes
        expect(assigns(:hotel)).to eq(hotel)
      end

      it "respond with success response code" do
        hotel = FactoryGirl.create(:hotel)
        put :update, format: :json, :id => hotel.id, :hotel => new_attributes
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid params" do
      it "doesn't update if rating is greater than 5" do
        hotel = FactoryGirl.create(:hotel)
        put :update, format: :json, :id => hotel.id, :hotel => {:star_rating => 6}
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "doesn't update if rating is less than 0" do
        hotel = FactoryGirl.create(:hotel)
        put :update, format: :json, :id => hotel.id, :hotel => {:star_rating => -1}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end

  end

  describe "DELETE #destroy" do
    it "destroys the requested hotel" do
      hotel = FactoryGirl.create(:hotel)
      expect {
        delete :destroy, {:id => hotel.to_param}, valid_session
      }.to change(Hotel, :count).by(-1)
    end

    it "return the no content status" do
      hotel = FactoryGirl.create(:hotel)
      delete :destroy, {:id => hotel.to_param}, valid_session
      expect(response).to have_http_status(:no_content)
    end
  end

end
